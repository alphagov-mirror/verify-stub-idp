buildscript {
    repositories {
        maven { url 'https://artifactory.ida.digital.cabinet-office.gov.uk/artifactory/whitelisted-repos/' }
    }
    dependencies {
        classpath 'org.gradle.plugins:gradle-compass:1.0.7',
                'uk.gov.ida:ida-gradle:1.1.0-15',
                'com.github.ben-manes:gradle-versions-plugin:0.11.3'
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'idaJar'
apply plugin: 'jacoco'
apply from: 'idea.gradle'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'application'
apply plugin: 'maven-publish'

mainClassName = 'uk.gov.ida.stub.idp.StubIdpApplication'


archivesBaseName = 'stub-idp'

def buildNumber = "$version"

ext {
    opensaml_version = '3.3.0'
}

task paasManifestFileCheck {
    doFirst {
        if (!project.hasProperty('manifestFile')) {
            def usage = './gradlew pushToPaas -PmanifestFile=<path to file>'
            println 'Manifest file is missing!!'
            println "Please run " + usage
            throw new GradleException("Usage: " + usage)
        }
    }
}
task pushToPaas(type: Exec, dependsOn: [paasManifestFileCheck, distZip]) {
    doFirst {
        commandLine 'cf', 'push', '-f', manifestFile
    }
}

distZip {
    into(project.name) {
        from 'configuration'
        include '*.yml'
    }

    // We want the .zip filename to be "ida-stub-idp-$version.zip",
    // but it's more convenient if the inner directory is "ida-stub-idp"
    // because the app needs to refer to its own location (at the moment).
    // TODO (2018-02-12): Remove the need for the app to know its own location
    // and remove this workaround.
    def versionedPath = archivePath
    version = null
    doLast {
        archivePath.renameTo(versionedPath)
    }
}

publishing {
    publications {
        zipFile(MavenPublication) {
            artifactId = "ida-stub-idp"
            version = "$buildNumber"
            groupId = "uk.gov.ida"

            artifact file("build/distributions/$project.name" + "-$buildNumber" + '.zip')
        }
    }
    repositories {
        maven {
            url "/srv/maven"
        }
    }
}

if (project.hasProperty('includeConfigDirectories')) {
    distZip {
        into(project.name + '/resources') {
            from includeConfigDirectories
        }
    }
}

if (project.hasProperty('includeDirectories')) {
    distZip {
        includeDirectories.split(',').each {
            def dir = "${it}"
            println dir
            into(project.name + '/resources') {
                from dir
                include '*'
            }
        }
    }
}

def dependencyVersions = [
        stub_idp_saml         : "$opensaml_version-64",
        ida_utils             : 329,
        dropwizard            : '1.1.4',
        ida_dev_pki           : '1.1.0-20',
        saml_metadata_bindings: "$opensaml_version-66",
        saml_security         : "$opensaml_version-56",
        ida_test_utils        : '37',
        hub_saml              : "$opensaml_version-106",
        saml_utils            : "$opensaml_version-65",
        hk2_version           : '2.5.0-b05',
        ida_saml_extensions   : "$opensaml_version-1.2a-41"
]

repositories {
    maven { url 'https://artifactory.ida.digital.cabinet-office.gov.uk/artifactory/whitelisted-repos/' }
}

dependencies {
    compile 'com.hubspot.dropwizard:dropwizard-guicier:1.0.0.6',
            // 0-jersey2-guice-spi has to be near the top of the dependencies
            'com.squarespace.jersey2-guice:0-jersey2-guice-spi:1.0.6',
            'org.opensaml:opensaml-core:' + dependencyVersions.opensaml,
            'uk.gov.ida:saml-metadata-bindings:' + dependencyVersions.saml_metadata_bindings,
            'uk.gov.ida:stub-idp-saml:' + dependencyVersions.stub_idp_saml,
            'org.mindrot:jbcrypt:0.3m',
            'io.dropwizard:dropwizard-core:' + dependencyVersions.dropwizard,
            'io.dropwizard:dropwizard-client:' + dependencyVersions.dropwizard,
            'io.dropwizard:dropwizard-auth:' + dependencyVersions.dropwizard,
            'io.dropwizard:dropwizard-configuration:' + dependencyVersions.dropwizard,
            'io.dropwizard:dropwizard-metrics-graphite:' + dependencyVersions.dropwizard,
            'io.dropwizard:dropwizard-assets:' + dependencyVersions.dropwizard,
            'io.dropwizard:dropwizard-views-freemarker:' + dependencyVersions.dropwizard,
            'io.dropwizard:dropwizard-views:' + dependencyVersions.dropwizard,
            'uk.gov.ida:dropwizard-infinispan:' + '1.0.5-27',
            'de.neuland-bfi:jade4j:0.4.0',
            'org.freemarker:freemarker:2.3.27-incubating',
            'org.jsoup:jsoup:1.6.1',
            "uk.gov.ida:common-utils:2.0.0-$dependencyVersions.ida_utils",
            "uk.gov.ida:rest-utils:2.0.0-$dependencyVersions.ida_utils",
            "uk.gov.ida:security-utils:2.0.0-$dependencyVersions.ida_utils",
            "uk.gov.ida:saml-security:$dependencyVersions.saml_security",
            "uk.gov.ida:dropwizard-saml:$opensaml_version-368",
            "uk.gov.ida:ida-saml-extensions:$dependencyVersions.ida_saml_extensions",
            "uk.gov.verify:saml-utils:$dependencyVersions.saml_utils",
            "org.jdbi:jdbi3-core:3.0.0",
            "org.postgresql:postgresql:42.1.4",
            "org.flywaydb:flyway-core:4.2.0"

    runtime 'joda-time:joda-time:2.3',
            'net.logstash.logback:logstash-logback-encoder:4.9'

    testCompile 'io.dropwizard:dropwizard-testing:' + dependencyVersions.dropwizard,
            'uk.gov.ida:stub-idp-saml-test:' + dependencyVersions.stub_idp_saml,
            'uk.gov.ida:ida-dev-pki:' + dependencyVersions.ida_dev_pki,
            'uk.gov.ida:saml-metadata-bindings-test:' + dependencyVersions.saml_metadata_bindings,
            'uk.gov.ida:common-test-utils:2.0.0-' + dependencyVersions.ida_test_utils,
            "uk.gov.ida:hub-saml:$dependencyVersions.hub_saml",
            "uk.gov.ida:hub-saml-test-utils:$dependencyVersions.hub_saml",
            "com.h2database:h2:1.4.196"

}

ext.mainclass = 'uk.gov.ida.stub.idp.StubIdpApplication'

sourceSets {
    integrationTest {
        java {
            srcDir 'src/integration-test/java'
        }
        resources {
            srcDir 'configuration'
        }
        compileClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.test.runtimeClasspath
        compileClasspath += sourceSets.test.output
    }
}

task integrationTest(type: Test) {
    setTestClassesDirs sourceSets.integrationTest.output.classesDirs
    classpath += sourceSets.integrationTest.runtimeClasspath
}

task copyToLib(dependsOn: jar, type: Copy) {
    into "$buildDir/output/lib"
    from configurations.runtime
}

task zip(dependsOn: copyToLib, type: Zip) {
    from "$buildDir/output"
}

task(outputDependencies) {
    doLast {
        println "saml_lib=" + dependencyVersions.saml_lib
        println "ida_utils=" + dependencyVersions.ida_utils
    }
}

jar.doFirst {
    mkdir("build/output")
}
